#!/usr/bin/env bash

set -Eeuo pipefail

# Execute cleanup() if any of these sig events happen
trap cleanup SIGINT SIGTERM ERR #EXIT

cleanup() {
    trap - SIGINT SIGTERM ERR #EXIT
    msg_error "==> Something went wrong...     "
    read -n1 -r key
    exit $?
}

# Colors are only meant to be used with msg()
# Sample usage:
# msg "This is a ${RED}very important${NOFORMAT} message
setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' \
            BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' \
            YELLOW='\033[1;33m' BOLD='\033[1m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW='' \
            BOLD=''
    fi
}

msg() {
    echo >&2 -e "${1-}${2-}${NOFORMAT}"
}
msg_not() {
    echo >&2 -e "${1-}${2-}${NOFORMAT}"
    # Skip pretty characters
    notify-send 'Arch Update' "${2:10:-8}"
}
msg_error() {
    echo >&2 -e "${RED}${BOLD}${1-}${NOFORMAT}"
    notify-send 'Arch Update' "${1:4:-8}" -u critical
}

setup_colors

# Source: https://www.redhat.com/sysadmin/arguments-options-bash-scripts
help() {
    # Display Help
    echo "Backup utility based on restic"
    echo
    echo "Backup task is the default"
    echo
    echo "Syntax: restic-backup [-b|r|h]"
    echo "options:"
    echo "b     Backup host"
    echo "r     Restore host"
    echo "h     Print this Help."
    echo
}

# Get the options
while getopts "b:rh" option; do
    case $option in
        h) # display Help
            help
            exit
            ;;
        b)
            backup
            exit 0
            ;;
        r)
            restore
            exit 0
            ;;
        \?) # Invalid option
            echo "Error: Invalid option"
            echo
            help
            exit
            ;;
    esac
done

# Backup pacman's local database
# More info here:
# https://wiki.archlinux.org/index.php/Pacman/Restore_local_database
srcs=(
    "$HOME/.gnupg" "$HOME/.ssh" "$HOME/.password-store" "/tmp/pacman_database.tar.bz2"
    "$HOME/.local/share/histfile" "$HOME/.local/share/z" "$HOME/.config/doublecmd"
    "$HOME/.password-store_work" "$HOME/.local/share/atuin"
    "$HOME/.password-store_mine"
    "$HOME/.screenshots"
    "$HOME/.screenlayout"
    "$HOME/.local/share/remmina"
    "$HOME/Documents"
    "$HOME/Downloads"
)

src=""
for str in "${srcs[@]}"; do
    [ -d "$str" ] || [ -f "$str" ] && src+="$str "
done
repo=""
pass=""
# Assign repo based on the current hostname
case $HOSTNAME in
    "xps")
        repo="$HOME/.mnt/work/drobo-B810n/Public/rmolina/bkps/$HOSTNAME/restic-repo"
        export PASSWORD_STORE_DIR=$HOME/.password-store_work
        pass="pass work/drobo/xps-restic-repo"
        ;;
        # Handle default case
        *)
        repo="$HOME/.mnt/skywafer/home/bkps/$HOSTNAME/repo"
        pass="pass linux/$HOSTNAME/restic"
        ;;
esac

backup() {
    msg_not "${CYAN}${BOLD}" "[RIMP]==> Backing up $HOSTNAME to '$repo'...     "
    restic --verbose --cleanup-cache \
        --password-command "$pass" \
        --repo "$repo" \
        backup $src
}

restore() {
    # The latest snapshot can be obtained by running: restic snapshots --json | jq -r '.[-1].id'
    snap_id="latest"
    restore_path="/"
    # Loop through the list of sources and attempt to restore each
    for src in "${restore_srcs[@]}"; do
        target_path="$restore_path${src}"
        if [ -f "$target_path" ] || [ -d "$target_path" ]; then
            # File/directory already exists in the restore location, add a timestamp to the original.
            mv "$target_path" "${target_path}_$(date '+%Y-%m-%d_%H-%M-%S')"
        fi

        msg_not "${CYAN}${BOLD}" "[RIMP]==> Restoring $src from snapshot $snap_id to $restore_path...     "
        restic --verbose --cleanup-cache --password-command "$pass" --repo "$repo" restore $snap_id --target="$restore_path" --include="$src"
    done
}


if [ $# -eq 0 ]; then
    backup
fi
