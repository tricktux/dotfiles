#!/usr/bin/env nix-shell
#! nix-shell -i python3 --pure
#! nix-shell -p feh python311Packages.requests

import sys
import requests
import configparser
import argparse


class PiHole():
    """
    Gets pihole data, using the 'summary' API request.
    """
    def get_status(self):
        """Returns current pihole server status"""

        self.data = self.get_raw_data('summary')

        if not self.data:
            return False

        if 'status' not in self.data:
            return False

        if self.data.get('status') == 'enabled':
            return True

        return False

    def __init__(self, cfg):
        """
        Gets pihole data, using the 'summary' API request.
        """

        self.webpass = ''
        self.url = ''
        self.data = {}

        if not cfg.has_option('Pihole', 'ip'):
            return

        ip_add = cfg['Pihole']['ip']
        if cfg.has_option('Pihole', 'webpassword'):
            self.webpass = cfg['Pihole']['webpassword']

        self.url = 'http://' + ip_add + '/admin/api.php?'

    def get_raw_data(self, query):
        """
        Returns dict with pihole data, using the 'summary' API request.
        """

        if not self.url or not query:
            return {}

        url = self.url + query
        try:
            resp = requests.get(url)
        except Exception:
            sys.exit(4)

        try:
            data = resp.json()
        except Exception:
            sys.exit(3)

        return data

    def get(self, key):
        """
        Returns key value if present at summary query

        Example `get(['ads_blocked_today'])`
        Returns negative value if failed to obtain such key
        """

        if not self.get_status():
            print('disabled')
            return []

        ret = []
        for k in key:
            if k not in self.data:
                continue
            ret += [self.data.get(k)]
        return ret

    def toggle(self):
        """Toggle pihole enable"""
        if not self.webpass:
            return 'Bad webpass'

        url = 'enable' if not self.get_status() else 'disable'
        response = self.get_raw_data(url + '&auth=' + self.webpass)
        return response.get('status', 'Toggle Failed')


def print_data(data):
    """Print list provided in `data`"""

    if not data:
        sys.exit(3)

    if len(data) < 2:
        sys.exit(2)

    queries = float(data[0].replace(',', ''))
    if queries > 999:
        queries /= 1000
        str_q = str(round(queries, 1))
    else:
        str_q = data[0]

    blocked = float(data[1].replace(',', ''))
    str_b = str(round(blocked, 1))

    print(f"{str_q}k {str_b}%")


def main():
    """Main function."""
    # Parse arguments
    args = argparse.ArgumentParser(description='PiHole Api Interface')
    args.add_argument('-c',
                      required=True,
                      default='pihole.ini',
                      dest='config',
                      help='Path to the configuration file')
    args.add_argument('--toggle',
                      nargs='?',
                      const=True,
                      dest='toggle',
                      default=False,
                      help='Toggle pihole enable')
    arg = args.parse_args()
    cfg_file = arg.config
    if not cfg_file:
        sys.exit(1)

    # Parse config
    cfg = configparser.ConfigParser()
    cfg.read(cfg_file)
    hole = PiHole(cfg)
    if arg.toggle:
        print(hole.toggle())
        return

    dhole = hole.get(['dns_queries_today', 'ads_percentage_today'])
    if not dhole:
        return
    print_data(dhole)


if __name__ == '__main__':
    main()


# vim: set ft=python:
