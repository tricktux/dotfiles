#!/bin/luajit

local _config = {}

-- Redshift command. Basically how to run the command.
-- Switches are provided as its own table
_config.redshift = {
  cmd = '/usr/bin/redshift',
  switches = {"-p", "-l", "manual"}
}

-- Wal command. But with switches for day time and switches for night time
-- Switches are provided as its own table
_config.pywal = {
  cmd = '/usr/bin/wal',
  day = {
    "--theme", "base16-google", "-l", "-q", "-o",
    "$HOME/.config/polybar/launch.sh"
  },
  sunrise = {
    "--theme", "solarized", "-l", "-q", "-o", "$HOME/.config/polybar/launch.sh"
  },
  night = {
    "--theme", "base16-gruvbox-hard", "-q", "-o",
    "$HOME/.config/polybar/launch.sh"
  },
  sunset = {
    "--theme", "solarized", "-q", "-o", "$HOME/.config/polybar/launch.sh"
  }
}
_config.print = {
  enabled = true,
  day = "  ",
  night = "  ",
  sunset = "  ",
  sunrise = "  "
}

local _options = {
  ['help'] = false,
  ['verbose'] = false,
  ['config'] = '',
  ['force'] = ''
}

local _usage = [[
  Usage: flux [OPTIONS...]

  Sets pywal colorscheme based on the time of the day reported by redshit.
  Intented to be called periodically so that when a change in day/night time is
  detected the system theme is changed automatically.

    --help (-h)                 Display this message
    --verbose (-v)              Verbose output
    --config (-c)               Location to configuration file
    --force (-f)                Force a specific day time period config. The 
                                next argument needs to be one of day, night, 
                                sunrise, or sunset

  Configuration follows the lua syntax. Default configuration:
    local _M = {}

    -- Redshift command. Basically how to run the command.
    -- Switches are provided as its own table
    _M.redshift = {cmd = '/usr/bin/redshift', switches = {"-p", "-l", "manual"}}

    -- Wal command. But with switches for time of day period
    -- Switches are provided as its own table
    _M.pywal = {
      cmd = '/usr/bin/wal',
      day = {
        "--theme", "base16-google", "-l", "-q", "-o",
        "$HOME/.config/polybar/launch.sh"
      },
      sunrise = {
        "--theme", "solarized", "-l", "-q", "-o",
        "$HOME/.config/polybar/launch.sh"
      },
      night = {
        "--theme", "base16-gruvbox-hard", "-q", "-o",
        "$HOME/.config/polybar/launch.sh"
      },
      sunset = {
        "--theme", "solarized", "-q", "-o",
        "$HOME/.config/polybar/launch.sh"
      }
    }

    -- Application could output an icon of your choosing to hint at current time
    -- of day set. This is useful to combine this application with polybar for
    -- instance. Output disbled by simply setting enable to false.
    _M.print = {
      enabled = true,
      day = "  ",
      night = "  ",
      sunset = "  ",
      sunrise = "  "
    }

    return _M
]]

local function _check_args()
  local last_opt = ''
  for _, opt in ipairs(arg) do
    if opt == '-h' or opt == '--help' then
      print(_usage)
      return 1
    end

    if opt == '-v' or opt == '--verbose' then
      _options['verbose'] = true
    elseif opt == '-c' or opt == '--config' then
      last_opt = 'config'
    elseif opt == '-f' or opt == '--force' then
      last_opt = 'force'
    elseif last_opt ~= nil then
      _options[last_opt] = opt
    end

  end

  if _options['verbose'] then
    print('Switch options:')
    for opt, val in pairs(_options) do
      print('\t' .. opt .. ' = "' .. tostring(val) .. '"')
    end
  end
  return 0
end

local _redshift = _config.redshift

-- @brief Check if program is executable by trying to open the binary
-- May fail with specific protected files
-- @param cmd (string) Full path to command. Ex: '/usr/bin/cat'
-- @return (int) 1 if found, 0 if not
local function _isfile(cmd)
  local file, err = io.open(cmd)
  if file == nil then
    print('Program ' .. cmd .. ' not found')
    if _options['verbose'] then print('\t' .. err) end
    return 1
  end

  return 0
end

local function _exec(cmd)
  cmd = cmd .. ' 2>&1&'
  local file, err = io.popen(cmd)
  if file == nil then
    print('Command ' .. cmd .. ' failed')
    if _options['verbose'] then print('\t' .. err) end
    return ''
  end
  local output = file:read('*all')
  file:close()
  return output
end

-- @brief Executes redshift with in print mode
-- Note: Day counts from the beggining of sunrise, and night from beg sunset
-- @param manual (bool) Wether to use force manual location provider
-- @return Period (string): day, night, or '' in case of error
function _redshift:exec()
  local opts = ''
  for _, opt in ipairs(self.switches) do opts = opts .. ' ' .. opt end
  local cmd = self.cmd .. opts

  if _options['verbose'] then print('Redshift command: \n\t' .. cmd) end
  local output = _exec(cmd)
  if _options['verbose'] then print('Redshift output: \n' .. output) end
  -- Search occurrance of the Period value in the output
  local trans = false
  if string.find(output, "[T-t]ransition") ~= nil then trans = true end
  if string.find(output, "[D-d]ay") ~= nil then
    if trans then return 'sunrise' end
    return 'day'
  end
  if string.find(output, "[N-n]ight") ~= nil then
    if trans then return 'sunset' end
    return 'night'
  end
  return ''
end

local _pywal = _config.pywal

-- @brief Execute the pywal command
-- @param period (string): One of 'day', 'night', 'sunrise', or 'sunset'
function _pywal:exec(period)
  local switches = self[period] == nil and 'night' or period
  local opts = ''
  for _, opt in ipairs(self[switches]) do opts = opts .. ' ' .. opt end
  local cmd = self.cmd .. opts

  if _options['verbose'] then print('Pywal command: \n\t' .. cmd) end
  local output = _exec(cmd)
  if _options['verbose'] then print('Pywal output: \n' .. output) end
end

local _memory = {location = [[/tmp/flux]]}

function _memory:store(period)
  local file = assert(io.open(self.location, "w+"))
  file:write(period)
  file:close()
end

function _memory:recall()
  local file = io.open(self.location)
  if file == nil then return '' end
  local output = file:read('*all')
  file:close()
  return output
end

local function _reload_config(config_file)
  if config_file == nil or config_file == '' then
    print('Error: Invalid config file provided')
    return nil
  end

  if _isfile(config_file) ~= 0 then
    print('Error: Config file not found:\n\t:' .. config_file)
    return nil
  end

  local f, err = loadfile(config_file)
  if f == nil then
    print('Error loading config file:\n\t:' .. config_file)
    print('Error:\n\t:' .. err)
    return nil
  end

  return f()
end

local function main()
  if _check_args() ~= 0 then return 0 end

  local cfg = _options['config']
  if cfg ~= '' then
    local config = _reload_config(cfg)
    if config == nil then return 1 end
    if _options['verbose'] then
      print('Config options:')
      for opt, val in pairs(config) do
        print('\t' .. opt .. ' = "' .. tostring(val) .. '"')
      end
    end
    -- Overwrite options
    for k, v in pairs(config.pywal) do _pywal[k] = v end
    for k, v in pairs(config.redshift) do _redshift[k] = v end
    for k, v in pairs(config.print) do _config.print[k] = v end
  end

  local forced_period = _options['force']
  if forced_period ~= '' then
    if _options['verbose'] then print('Forcing period:\n\t' .. forced_period) end
    _pywal:exec(forced_period)
    return
  end

  local period = _redshift:exec(_options['manual'])
  if _options['verbose'] then print('Day period:\n\t' .. period) end
  if period == '' then return 3 end

  if _config.print['enabled'] then print(_config.print[period]) end

  local last_period = _memory:recall()
  if _options['verbose'] then print('Last day period:\n\t' .. last_period) end
  if last_period == period then
    if _options['verbose'] then
      print('Time of day has not change. Nothing to do. Bye bye :D')
    end
    return
  end

  _memory:store(period)
  _pywal:exec(period)
end

return main()
