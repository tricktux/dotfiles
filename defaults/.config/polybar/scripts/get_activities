#!/home/reinaldo/.local/share/pyvenv/polybar/bin/python

import argparse
import configparser
import csv
import datetime
import logging
import os
import sys
from logging.handlers import RotatingFileHandler
from pathlib import Path

import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import pandas as pd
import plotly.graph_objects as go
from plotly_resampler import FigureResampler
from stravalib import unithelper
from stravalib.client import Client

DEBUG = 0
LOG = "get_activities"


def plot():
    if not os.path.isfile(r"/tmp/bike.csv"):
        return
    date = []
    power = []
    heart_rate = []
    duration = []
    with open(r"/tmp/bike.csv") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            if row["avg power"] == "N/A":
                continue
            date.append(row["date"])
            heart_rate.append(float(row["avg heart rate"]))
            power.append(float(row["avg power"]))
            dur = row["duration"]
            hours = int(dur[0]) * 60
            duration.append(hours + int(dur[-2:]))

    x = [datetime.datetime.strptime(d, "%m/%d/%y").date() for d in date]
    plt.gca().xaxis.set_major_formatter(mdates.DateFormatter("%m/%d/%y"))
    plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=5))
    plt.plot(x, heart_rate, "-", label="Heart Rate")
    plt.plot(x, power, ":", label="Avg Power (watts)")
    plt.plot(x, duration, "-.", label="Duration (mins)")
    plt.gcf().autofmt_xdate()
    plt.legend(loc="best")
    plt.savefig(r"/tmp/bike.png")


def plotly(data_file, x_col, col_names, plot_name):
    if not os.path.isfile(data_file):
        print(f"File {data_file} does not exist")
        return
    p = pd.read_csv(data_file)

    x = p[x_col] if x_col in p else p.index

    img = FigureResampler(go.Figure())
    for col in col_names:
        img.add_trace(go.Scattergl(x=x, y=p[col], name=col))
    img.update_layout(
        xaxis=dict(tickformat="%m/%d/%y", type="date"),
        height=1080,
        width=2048,
        title_text=plot_name,
    )
    # Save to data_file with png extension
    data_file_png = os.path.splitext(data_file)[0] + ".html"
    img.write_html(data_file_png)


def seconds_to_hours(seconds):
    """Converts seconds to hours and mintues string"""
    m, s = divmod(seconds, 60)
    h, m = divmod(m, 60)
    return "%d:%02d" % (h, m)


class Config:
    def __init__(self, filename):
        self.config = configparser.ConfigParser()

        self.my_file = Path(filename)
        logger = logging.getLogger(LOG)
        if DEBUG > 0:
            logger.debug("[Config::init]: filename = %s", filename)
        if not self.my_file.is_file():
            if DEBUG > 0:
                logger.critical("[Config::init]: filename not found")
            #  print(-1)
            sys.exit(1)
        self.config.read(filenames=self.my_file)

    def get_str(self, section, option, default):
        """Get string option"""
        logger = logging.getLogger(LOG)
        try:
            return self.config[section].get(option, default)
        except:
            if DEBUG > 0:
                logger.critical(
                    '[Config::get_str]: Failed to get option: "%s", section: "%s"',
                    option,
                    section,
                    exc_info=True,
                )
            return default

    def set_str(self, section, option, value):
        """Set value of section"""
        logger = logging.getLogger(LOG)
        try:
            self.config[section][option] = value
            with open(self.my_file, "w") as configfile:
                self.config.write(configfile)
        except:
            if DEBUG > 0:
                logger.critical(
                    '[Config::set_str]: Failed to set option: "%s", section: "%s"',
                    option,
                    section,
                    exc_info=True,
                )
            return


class Parser:
    def __init__(self):
        self.parser = argparse.ArgumentParser(description="Get strava info")
        self.parser.add_argument(
            "config", default="config.ini", help="path to the configuration file"
        )
        self.parser.add_argument(
            "--debug", "-d", type=int, default=0, help="create debug file"
        )
        self.args = self.parser.parse_args()


class Strava:
    """
    Find activities attributes here:
        https://github.com/hozn/stravalib/blob/master/stravalib/model.py
    """

    def __init__(self, token, client_id, client_secret, year, config):
        logger = logging.getLogger(LOG)
        if DEBUG > 0:
            logger.debug('token: "%s", year: "%s"', token, year)
        self.current_year = datetime.date.today().year
        self.config = config
        if not year or year == "current":
            year = self.current_year
        try:
            client = Client()
            # Exchange refresh token for a "new" access token.
            # If access_token has not expired (it expires every 6 hours)
            # You will get the same old token. Otherwise, you will get a new
            # token. which you have to save (update_token_information)
            # Read here: https://developers.strava.com/docs/authentication/
            # Specifically the "Refresh expired access tokens part"
            access_token = client.refresh_access_token(client_id, client_secret, token)
            client.access_token = access_token["access_token"]
            self.activities = client.get_activities(
                after="{}-01-01T00:00:00Z".format(str(year)),
                before="{}-01-01T00:00:00Z".format(str(year + 1)),
                limit=500,
            )
            if token != access_token["refresh_token"]:
                if DEBUG > 0:
                    logger.debug("There is a new token in town!!!")
                    logger.debug(
                        'old token: "%s". new token: "%s"',
                        token,
                        access_token["refresh_token"],
                    )
                self.update_token_information(access_token)
        except:
            if DEBUG > 0:
                logger.critical("failed to get activities", exc_info=True)
            #  print(-3)
            sys.exit(3)

    def update_token_information(self, token):
        """Write the newly recently obtained information"""
        self.config.set_str("Token", "access_token", token["access_token"])
        self.config.set_str("Token", "refresh_token", token["refresh_token"])
        self.config.set_str("Token", "expires_at", str(token["expires_at"]))

    def get_num_activities(self):
        return str(len(list(self.activities)))

    def get_total_time(self):
        """Get time for all activities"""
        elapse_time = 0
        for activity in self.activities:
            elapse_time += activity.elapsed_time.seconds
        return datetime.timedelta(seconds=elapse_time).total_seconds()

    def get_total_elevation(self):
        """Get total elevation in feet for all activities"""
        e = 0.0
        for activity in self.activities:
            e += float(activity.total_elevation_gain)
        return str(round(e * 3.28084, 1))

    def get_total_distance(self):
        """Get total distance in miles for all activities"""
        d = 0.0
        for activity in self.activities:
            d += float(activity.distance)

        return str(round(d * 0.0006213712, 1))

    def sortby(self, item):
        return item.start_date

    def get_last_bike_avg_speed(self):
        """
        Get the avg speed in miles per hour of the last bike ride.
        That was not on a trainer.
        Types seem to be 'Run', 'Swim', 'Ride'
        """
        logger = logging.getLogger(LOG)
        avg = 0.0
        for activity in sorted(self.activities, key=self.sortby, reverse=True):
            if DEBUG > 0:
                logger.debug(
                    '[get_last_bike_avg_speed]: type = "%s"', str(activity.type)
                )
            if activity.type == "Ride" and not activity.trainer:
                avg = unithelper.miles_per_hour(activity.average_speed)
                break

        return str(avg)

    def get_csv_of_bike_activities(self):
        """https://pythonhosted.org/stravalib/api.html#stravalib.model.Activity"""
        logging.getLogger(LOG)
        file_path = r"/tmp/bike.csv"
        print(self.activities)
        with open(file_path, "w") as csvfile:
            fieldnames = [
                "date",
                "duration",
                "distance",
                "avg heart rate",
                "avg power",
                "avg cadence",
                "elevation",
                "avg speed",
                "trainer",
            ]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            for activity in sorted(self.activities, key=self.sortby):
                if activity.type not in ("Ride", "VirtualRide"):
                    continue
                date = activity.start_date_local.strftime("%x")
                print(date)
                seconds = datetime.timedelta(
                    seconds=activity.elapsed_time.seconds
                ).total_seconds()
                hrs = seconds_to_hours(seconds)
                distance = unithelper.miles(activity.distance)
                hr = activity.average_heartrate if activity.has_heartrate else "N/A"
                power = activity.average_watts if activity.device_watts else "N/A"
                cadence = activity.average_cadence
                elevation = unithelper.feet(activity.total_elevation_gain)
                spd = unithelper.miles_per_hour(activity.average_speed)
                trainer = "yes" if activity.type == "VirtualRide" else "no"
                writer.writerow(
                    {
                        "date": date,
                        "duration": hrs,
                        "distance": distance,
                        "avg heart rate": hr,
                        "avg power": power,
                        "avg cadence": cadence,
                        "elevation": elevation,
                        "avg speed": spd,
                        "trainer": trainer,
                    }
                )

        return file_path


def set_logger():
    """Setups the logger"""
    logger = logging.getLogger(LOG)
    handler = RotatingFileHandler(
        "/tmp/" + LOG + ".log", maxBytes=10**6, backupCount=5
    )
    formatter = logging.Formatter("%(asctime)s_%(levelname)s: %(message)s")

    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)


if __name__ == "__main__":
    parser = Parser()
    DEBUG = int(parser.args.debug)
    set_logger()
    logger = logging.getLogger(LOG)
    config = Config(parser.args.config)
    token = config.get_str("Token", "refresh_token", "")
    client_id = config.get_str("ApiInfo", "client_id", "")
    client_secret = config.get_str("ApiInfo", "client_secret", "")
    if not token or not client_id or not client_secret:
        if DEBUG > 0:
            logger.critical(
                'failed to get tokens. token: "%s", client_id: "%s", client_secret: "%s"',
                token,
                client_id,
                client_secret,
            )
        sys.exit(2)
    year = config.get_str("Workout", "year", "")
    strava = Strava(token, client_id, client_secret, year, config)
    num_workouts = strava.get_num_activities()
    td = strava.get_total_time()
    num_hours = seconds_to_hours(td)
    num_miles = strava.get_total_distance()
    e = strava.get_total_elevation()
    print(num_workouts + " " + num_hours + " " + num_miles + " m " + e + " ft")
    root = r"/tmp/bike.csv"
    html = r"/tmp/bike.html"
    if not os.path.isfile(root):
        strava.get_csv_of_bike_activities()
        column_names = ("avg heart rate", "avg power", "duration")
        x_col = "date"
        plotly(r"/tmp/bike.csv", x_col, column_names, "Bike Progress")
