# File:                    cpp.snip
# Description:         Shortcuts to most used cpp stuff
# Author:              Reinaldo Molina <rmolin88@gmail.com>
# Version:             1.0.0
# Last Modified: Wed Jan 22 2020 04:27
# Created: Jun 13 2017 16:26

snippet     us
abbr        unordered set
options     head
    std::unordered_set<${1:key}> ${2:name};

snippet     um
abbr        unordered map
options     head
    std::unordered_map<${1:key}, ${2:val}> ${3:name};

snippet     main
abbr        cpp main function
options     head
    #include <cstdio>

    int main(int argc, char *argv[]) {
      printf("hello world\n");
      ${1}
      return 0;
    }

snippet     p
abbr        printf
options     head
    printf("${1:hello}\n"${2});

snippet     out
abbr        standard cout
options     head
    std::cout << "{1:print_here}" << '\n';

snippet     copyctor
abbr        copy constructor
options     head
    ${1:class} ($1 &&other) = delete;
    $1 (const $1 &other) = delete;

snippet     copyagmnt
abbr        copy assignment
options     head
    ${1:class}& operator=($1 &&other) = delete;
    $1& operator=(const $1 &other) = delete;

snippet     iss
abbr        Input String Stream
options     head
    std::istringstream ${1:iss};

snippet     oss
abbr        Output String Stream
options     head
    std::ostringstream ${1:oss};

snippet     ss
abbr        String Stream
options     head
    std::stringstream ${1:ss};

snippet     limits
abbr        cpp limits
options     head
    #include <limits>
    std::numeric_limits<${1:type: int, double, float}>::${2:min, max}();

snippet     time
abbr        time a function
options     head
    #include <chrono>
    auto start = std::chrono::high_resolution_clock::now(); 
    // function here
    auto stop = std::chrono::high_resolution_clock::now(); 
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start); 
    std::cout << "Time taken by function: "
         << duration.count() << " microseconds" << std::endl; 

snippet     ostream
abbr        operator<< osteam function
options     head
    friend std::ostream& operator<<(std::ostream& os, const ${1:class}& ${2:object}) {
        os  << "${3:member}: '" << $2.$3 << "', "
            << "${4:member}: '" << $2.$4 << "', "
            << "${5:member}: '" << $2.$5 << "'\n";
        return os;
    }

snippet     author
abbr        Doxygen header
options     head
    /// @file `expand('%:t')`
    /// @brief ${1: Brief Description}
    /// @author Reinaldo Molina

snippet singleton
abbr    cpp singleton class
    class ${1:name}
    {
        $1() {}                    // Constructor? (the {} brackets) are needed here.

        // C++ 03
        // ========
        // Don't forget to declare these two. You want to make sure they
        // are unacceptable otherwise you may accidentally get copies of
        // your singleton appearing.
        $1($1 const&);              // Don't Implement
        void operator=($1 const&);  // Don't implement

    public:
        static $1& GetInstance()
        {
            static $1 instance; // Guaranteed to be destroyed.
                                  // Instantiated on first use.
            return instance;
        }
        // C++ 11
        // =======
        // We can use the better technique of deleting the methods
        // we don't want.
        // Note: Scott Meyers mentions in his Effective Modern
        //       C++ book, that deleted functions should generally
        //       be public as it results in better error messages
        //       due to the compilers behavior to check accessibility
        //       before deleted status
        $1($1 const&)               = delete;
        void operator=($1 const&)  = delete;
    };

snippet     str
abbr        std::string
    std::string ${1:name};

snippet     vec
abbr        std::vector
options     head
    std::vector<${1:Type}> ${2:name}; ${3:$2.reserve(1024);}

snippet logue
options head
  UE_LOG(Log${1:Category,Temp}, ${2:Fatal,Error,Warning,Display,Log,Verbose,VeryVerbose}, TEXT("${4:FormatStr}"), ${5:...})

snippet     upd
abbr        UpdateStatusAreaEx
options     head
  UpdateStatusAreaEx("${1:Msg Here}", ${2:COLOR_ERROR, COLOR_WARNING, COLOR_SUCCESS});


snippet lgi
abbr LG Info
options head
    LG.info("${1:Message}"${2:Variables});

snippet lgw
abbr LG Warn
options head
    LG.warn("${1:Message}"${2:Variables});

snippet lge
abbr LG Error
options head
    LG.error("${1:Message}"${2:Variables});

snippet dlog
abbr Easylogging dlog
options head
    DLOG(${1:INFO}${2:WARNING}${3:ERROR}${4:FATAL}) << "${5:Message}";

snippet glog
abbr Google Glog
options head
    LOG(${1:INFO,WARNING,ERROR,FATAL}) << "[" << __FUNCTION__ << "]: ${2:Message}";

##
## Control Statements
# if
snippet if
  if (${1:true}) {
    ${0:$VISUAL}
  }
snippet ife
  if (${1:true}) {
    ${2:$VISUAL}
  } 
  else {
    ${0}
  }
# else
snippet el
  else {
    ${0:$VISUAL}
  }
# else if
snippet elif
  else if (${1:true}) {
    ${0:$VISUAL}
  }
# ifi
snippet ifi
  if (${1:true}) ${0};
# ternary
snippet t
  ${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
  switch (${1:/* variable */}) {
    case ${2:/* variable case */}:
      ${3}
      ${4:break;}${5}
    default:
      ${6}
  }
# switch without default
snippet switchndef
  switch (${1:/* variable */}) {
    case ${2:/* variable case */}:
      ${3}
      ${4:break;}${5}
  }
# case
snippet case
  case ${1:/* variable case */}:
    ${2}
    ${3:break;}
snippet ret
  return ${0};
##
## Loops
# for
snippet for
  for (int ${1:k} = 0; $1 < ${2:count}; $1${3:++}) {
    ${4}
  }
# for (custom)
snippet forr
  for (int ${1:k} = ${2:0}; $1 ${3:<} ${4:10}; $1${5:++}) {
    ${6}
  }
# while
snippet wh
  while (${1:/* condition */}) {
    ${0:$VISUAL}
  }
# do... while
snippet do
  do {
    ${0:$VISUAL}
  } while (${1:/* condition */});


snippet     try
options     head
abbr        try catch
    try {
        ${0}
        ${1:return 1;}
    }
    catch (${2:...}) {
        ${3:return -100;}
    }
